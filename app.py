from flask import Flask, render_template, request, jsonify, send_file
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
import torch
import pandas as pd
import os

app = Flask(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
MODEL_DIR = "D:/modelivan"  # –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
FEEDBACK_FILE = "user_feedback.csv"
UPLOAD_FOLDER = "uploads"
RESULT_FOLDER = "results"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
tokenizer = AutoTokenizer.from_pretrained(MODEL_DIR)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_DIR)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –º–µ—Ç–æ–∫ –≤ —Ç–µ–∫—Å—Ç
sentiment_mapping = {
    0: "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω üòû",
    1: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω üòê",
    2: "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω üòä"
}

@app.route("/")
def index():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    return render_template("index.html")

@app.route("/analyze", methods=["POST"])
def analyze():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    data = request.get_json()
    text = data.get("text", "")
    if not text.strip():
        return jsonify({"sentiment": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."})

    # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=128)
    outputs = model(**inputs)
    pred = torch.argmax(outputs.logits, dim=1).item()
    sentiment = sentiment_mapping.get(pred, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    return jsonify({"sentiment": sentiment, "message_id": text})  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ message_id

@app.route("/upload", methods=["POST"])
def upload():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    if "file" not in request.files:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

    file = request.files["file"]
    if file.filename == "":
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400

    try:
        file_path = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(file_path)

        df = pd.read_excel(file_path, engine="openpyxl")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        for index, text in enumerate(df.iloc[:, 0]):
            if isinstance(text, str) and text.strip():
                inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=128)
                outputs = model(**inputs)
                pred = torch.argmax(outputs.logits, dim=1).item()
                sentiment = sentiment_mapping.get(pred, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                df.loc[index, "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"] = sentiment

        result_filename = f"results_{file.filename}"
        result_path = os.path.join(RESULT_FOLDER, result_filename)
        df.to_excel(result_path, index=False, engine="openpyxl")

        return jsonify({"file_url": f"/download/{result_filename}"})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"}), 500

@app.route("/correct_feedback", methods=["POST"])
def correct_feedback():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    data = request.get_json()
    message_id = data.get("message_id")
    correct_sentiment = data.get("correct_sentiment")

    if not message_id or not correct_sentiment:
        return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 400

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ CSV
    feedback_data = pd.DataFrame([[message_id, correct_sentiment]], columns=["message_id", "correct_sentiment"])
    if os.path.exists(FEEDBACK_FILE):
        feedback_data.to_csv(FEEDBACK_FILE, mode='a', header=False, index=False, encoding="utf-8")
    else:
        feedback_data.to_csv(FEEDBACK_FILE, mode='w', index=False, encoding="utf-8")

    return jsonify({"message": "–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"}), 200

@app.route("/train", methods=["POST"])
def train_model():
    """–î–æ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö"""
    if not os.path.exists(FEEDBACK_FILE):
        return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è"}), 400

    feedback_data = pd.read_csv(FEEDBACK_FILE)

    if feedback_data.empty:
        return jsonify({"error": "–§–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –ø—É—Å—Ç"}), 400

    texts = feedback_data["message_id"].tolist()
    labels = feedback_data["correct_sentiment"].tolist()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏ –≤ —á–∏—Å–ª–æ–≤—ã–µ
    label_map = {"negative": 0, "neutral": 1, "positive": 2}
    labels = torch.tensor([label_map[label] for label in labels])

    # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã
    inputs = tokenizer(texts, padding=True, truncation=True, return_tensors="pt")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    training_args = TrainingArguments(
        output_dir="./fine_tuned_model",
        num_train_epochs=3,
        per_device_train_batch_size=4,
        save_steps=500,
        save_total_limit=2,
        logging_dir="./logs",
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset={"input_ids": inputs["input_ids"], "labels": labels},
    )
    trainer.train()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model.save_pretrained("fine_tuned_rubert")
    tokenizer.save_pretrained("fine_tuned_rubert")

    return jsonify({"message": "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–æ–±—É—á–µ–Ω–∞!"}), 200

@app.route("/download/<filename>")
def download_file(filename):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
    file_path = os.path.join(RESULT_FOLDER, filename)
    return send_file(file_path, as_attachment=True)

if __name__ == "__main__":
    app.run(debug=True, threaded=True, host="0.0.0.0", port=5000)
