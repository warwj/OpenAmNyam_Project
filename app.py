from flask import Flask, render_template, request, jsonify, send_file
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import pandas as pd
import os

app = Flask(__name__)

# –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (—Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤)
model_directory = "D:\modelivan"  # –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å
tokenizer = AutoTokenizer.from_pretrained(model_directory)
model = AutoModelForSequenceClassification.from_pretrained(model_directory)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –º–µ—Ç–æ–∫ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
sentiment_mapping = {
    0: "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω üòû",
    1: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω üòê",
    2: "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–Ω üòä"
}

UPLOAD_FOLDER = "uploads"
RESULT_FOLDER = "results"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULT_FOLDER, exist_ok=True)


@app.route("/")
def index():
    return render_template("index.html")


@app.route("/analyze", methods=["POST"])
def analyze():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏"""
    data = request.get_json()
    text = data.get("text", "")
    if not text.strip():
        return jsonify({"sentiment": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."})

    # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=128)
    outputs = model(**inputs)
    pred = torch.argmax(outputs.logits, dim=1).item()
    sentiment = sentiment_mapping.get(pred, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    return jsonify({"sentiment": sentiment})


@app.route("/upload", methods=["POST"])
def upload():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel-—Ñ–∞–π–ª, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    if "file" not in request.files:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

    file = request.files["file"]
    if file.filename == "":
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"}), 400

    try:
        file_path = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(file_path)

        df = pd.read_excel(file_path, engine="openpyxl")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü)
        for index, text in enumerate(df.iloc[:, 0]):
            if isinstance(text, str) and text.strip():
                inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=128)
                outputs = model(**inputs)
                pred = torch.argmax(outputs.logits, dim=1).item()
                sentiment = sentiment_mapping.get(pred, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                df.loc[index, "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"] = sentiment

        result_filename = f"results_{file.filename}"
        result_path = os.path.join(RESULT_FOLDER, result_filename)
        df.to_excel(result_path, index=False, engine="openpyxl")

        return jsonify({"file_url": f"/download/{result_filename}"})
    except Exception as e:
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"}), 500


@app.route("/download/<filename>")
def download_file(filename):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
    file_path = os.path.join(RESULT_FOLDER, filename)
    return send_file(file_path, as_attachment=True)


if __name__ == "__main__":
    app.run(debug=True, threaded=True, host="0.0.0.0", port=5000)


